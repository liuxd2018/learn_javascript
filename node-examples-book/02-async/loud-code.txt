CONST FS = REQUIRE('FS')
CONST HTTPS = REQUIRE('HTTPS')

CONST {TRANSFORM} = REQUIRE('STREAM')

CONST FILEURL = `HTTPS://HIMG2.HUANQIUCDN.CN/ATTACHMENT2010/2020/0602/13/06/20200602010650399.JPG`

HTTPS.GET(FILEURL, RES => {
    CONST CHUNKS = []

    RES.ON('DATA', DATA => CHUNKS.PUSH(DATA)).ON('END', () => {
        FS.WRITEFILE('BOOK.PNG', BUFFER.CONCAT(CHUNKS), ERR => {
            IF(ERR) CONSOLE.ERROR(ERR)

            CONSOLE.LOG('FILE SAVED!')
        })
    })
})

// HTTPS.GET(FILEURL, RES => { // CALLBACK AUTOMATICALLY CLOSE THE READABLE STREAM
//     CONST FILESTREAM = FS.CREATEWRITESTREAM('BOOK1.PNG')
//     RES.ON('DATA', DATA => FILESTREAM.WRITE(DATA))
//        .ON('END', () => {
//            FILESTREAM.END() // CLOSE WRITABLE STREAM
//            CONSOLE.LOG('FILE SAVED!')
//        })
// })

// CONNECT READABLE STREAMS TO WRITABLE STREAMS VIA PIPE()

// HTTPS.GET(FILEURL, RES => {
//     RES.PIPE(FS.CREATEWRITESTREAM('BOOK2.PNG'))
//         .ON('FINISH', () => CONSOLE.LOG('FILE SAVED!'))
// })

// TRANSFORM STREAMS
// BEHAVES AS BOTH A READABLE STREAM AND A WRITABLE STREAM

FS.CREATEREADSTREAM('11-STREAMS-DOWNLOAD-BOOK-COVER-BATCH.JS')
    .PIPE(SHOUT())
    .PIPE(FS.CREATEWRITESTREAM('LOUD-CODE.TXT'))

FUNCTION SHOUT() {
    RETURN NEW TRANSFORM({
        TRANSFORM(CHUNK, ENCODING, CALLBACK) {
            CALLBACK(NULL, CHUNK.TOSTRING().TOUPPERCASE())
        }
    })
}